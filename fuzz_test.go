package automerge_test

import (
	"crypto/sha256"
	"testing"

	"github.com/automerge/automerge-go"
)

var magicBytes = [4]byte{133, 111, 74, 131}

func addHeader(b []byte, kind byte) []byte {
	encodedLength := leb128(uint64(len(b)))
	payload := append(append([]byte{kind}, encodedLength...), b...)
	hash := sha256.Sum256(payload)
	return append(append(magicBytes[:], hash[:4]...), payload...)
}

// from: https://github.com/aviate-labs/leb128/blob/v0.1.0/leb.go#L13
func leb128(n uint64) []byte {
	leb := make([]byte, 0)
	if n == 0 {
		return []byte{0}
	}
	for n != 0x00 {
		b := byte(n & 0x7F)
		n >>= 7
		if n != 0x00 {
			b |= 0x80
		}
		leb = append(leb, b)
	}
	return leb
}

func FuzzLoadChange(f *testing.F) {
	testcases := [][]byte{
		[]byte{},
		[]byte{0x0, 0x10, 0xfc, 0xb1, 0x47, 0xfe, 0xca, 0x10, 0x4d, 0xfe, 0x9f, 0x94, 0xaa, 0x2, 0x7f, 0x68, 0x7b, 0x6b, 0x1, 0x1, 0xbe, 0xf7, 0xd1, 0xd0, 0xe2, 0x30, 0x0, 0x0, 0x6, 0x15, 0x3, 0x34, 0x1, 0x42, 0x2, 0x56, 0x2, 0x57, 0x2, 0x70, 0x2, 0x7f, 0x1, 0x61, 0x1, 0x7f, 0x1, 0x7f, 0x28, 0xd0, 0xf, 0x7f, 0x0},
		[]byte{0x0, 0x10, 0xda, 0xa, 0x54, 0x54, 0x42, 0x43, 0x49, 0x84, 0x85, 0x0, 0xa5, 0xeb, 0xe1, 0xac, 0xd9, 0x4d, 0x1, 0x1, 0xc1, 0xbe, 0xc4, 0x83, 0xe1, 0x30, 0x8, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x31, 0x0, 0x5, 0x15, 0x3, 0x34, 0x1, 0x42, 0x2, 0x56, 0x2, 0x70, 0x2, 0x7f, 0x1, 0x61, 0x1, 0x7f, 0x0, 0x7f, 0x0, 0x7f, 0x0},
	}
	for _, tc := range testcases {
		f.Add(tc)
	}

	f.Fuzz(func(t *testing.T, orig []byte) {
		d, err := automerge.Load(addHeader(orig, 1))
		if err != nil {
			return
		}

		automerge.As[map[string]any](d.Root())
	})
}
