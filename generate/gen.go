package main

import (
	"fmt"
	"strings"

	"github.com/iancoleman/strcase"
)

// creates wrapper functions to get value from AMresult
// needed because Go unpacks unions into byte arrays...
func main() {
	cFile := ""

	// generated by pasting the definition of AMvalue in automerge.h through:
	// pbpaste | grep -v 'struct {' | grep -v '};' | grep -v '_tag;' | sed 's/ */`/' | sed 's/$/`,/'
	for _, line := range []string{
		`AMvalueVariant tag;`,
		`const struct AMactorId *actor_id;`,
		`bool boolean;`,
		`struct AMbyteSpan bytes;`,
		`struct AMchangeHashes change_hashes;`,
		`struct AMchanges changes;`,
		`int64_t counter;`,
		`struct AMdoc *doc;`,
		`double f64;`,
		`int64_t int_;`,
		`struct AMlistItems list_items;`,
		`struct AMmapItems map_items;`,
		`const struct AMobjId *obj_id;`,
		`struct AMobjItems obj_items;`,
		`const char *str;`,
		`struct AMstrs strs;`,
		`const struct AMsyncMessage *sync_message;`,
		`struct AMsyncState *sync_state;`,
		`int64_t timestamp;`,
		`uint64_t uint;`,
		`struct AMunknownValue unknown;`,
	} {

		line = strings.TrimSuffix(line, ";")
		idx := strings.LastIndexAny(line, " *")

		signature := line[0 : idx+1]
		name := line[idx+1 : len(line)]

		suffix := strcase.ToCamel(name)

		cFile += signature + "AMresultValue" + suffix + "(AMresult *r) { return AMresultValue(r)." + name + "; }\n"
	}

	fmt.Print(cFile)
}
